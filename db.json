{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/header.jpg","path":"images/header.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1555079369451},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1555079364282},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1555079364303},{"_id":"themes/next/.gitignore","hash":"3558a8b174618c7a643aceb13233edd729813f9a","modified":1555079365918},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1555079369435},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1555079364299},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1555079369478},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1555079364277},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1555079364279},{"_id":"themes/next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1555079364297},{"_id":"themes/next/_config.yml","hash":"18336f3aafbf140b9e56142f18f2d12a264f02ea","modified":1555553997722},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1555079369398},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1555079369409},{"_id":"themes/next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1555079369399},{"_id":"themes/next/.git/FETCH_HEAD","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555079364751},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1555079369419},{"_id":"source/_posts/hello-world.md","hash":"9ed866852ebb0373bd2fe7382c7700a5d2a289d7","modified":1555427473554},{"_id":"source/_posts/ipc-chat.md","hash":"3e5d00884a0a4221fbef35ea79c52bdf156ad6fc","modified":1555553611331},{"_id":"source/about/index.md","hash":"bd6ed27015b253e41ad9603f8b0a3b39bf714d8f","modified":1555525280491},{"_id":"source/categories/index.md","hash":"f6fec31bbb8411a10d97bd75e1d17d70148f8faf","modified":1555147697759},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1555079364814},{"_id":"themes/next/.git/ORIG_HEAD","hash":"4ba53f1844aa48f65163fb62ebf916ec0cc53822","modified":1555079364646},{"_id":"themes/next/.git/config","hash":"3aa58ad32c5b537b7b64d00c59cc2787e74a3fd2","modified":1555079365879},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1555079364758},{"_id":"themes/next/avatar.jpg","hash":"911f2f298556a3828a2a5c2023ef527431edb011","modified":1555079369284},{"_id":"themes/next/.git/index","hash":"3c26b15be98f0b4a7ef6a05b4616f31dfd13591d","modified":1555497711124},{"_id":"themes/next/.git/packed-refs","hash":"6a571d29ced6e48ecddc7da02839ea3f9a8060b2","modified":1555079364751},{"_id":"source/tags/index.md","hash":"6588793fe22b22908ac0cd69497c312b12f146db","modified":1555147692902},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1555079365886},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1555079365890},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1555079365897},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1555079365896},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1555079365903},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1555079365905},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1555079365884},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1555079365883},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1555079365893},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1555079365895},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1555079365899},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1555079364616},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1555079364372},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1555079365887},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1555079365916},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1555079365881},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1555079369204},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1555079369205},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1555079368559},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1555079368566},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1555079368563},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1555079368561},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1555079363447},{"_id":"themes/next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1555079363461},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1555079363461},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1555079363464},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1555079363394},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1555079363497},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1555079363404},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1555079363494},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1555079363407},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1555079363371},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1555079363396},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1555079363415},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1555079363486},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1555079363410},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1555079363338},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1555079363401},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1555079363499},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1555079363484},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1555079363481},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1555079369206},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1555079368658},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1555079369360},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1555079369378},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1555079369361},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1555079369395},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1555079369286},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1555079369286},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1555079369396},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1555079369285},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1555079364221},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1555079369303},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1555079364254},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1555079364238},{"_id":"themes/next/.git/logs/HEAD","hash":"340bc1d97e71db8a08b6cdd7fa68bf8b53ffe21c","modified":1555079364676},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1555079364812},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1555079364811},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1555079364810},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1555079364813},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1555079364804},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1555079364799},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1555079364805},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1555079364812},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1555079364802},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555079366610},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1555079364544},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1555079364593},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1555079364610},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1555079364483},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1555079364510},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1555079364494},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1555079364500},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1555079364481},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1555079364517},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1555079364508},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1555079364505},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1555079364497},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1555079364511},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1555079364514},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1555079364486},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1555079368571},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555079368569},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555079368568},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1555079365907},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1555079365913},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1555079365909},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1555079369203},{"_id":"themes/next/layout/_macro/post.swig","hash":"10187fafe566b3e5bfa4e7e10c77ea9026d9081d","modified":1555079369202},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1555079369201},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1555079366608},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1555079365911},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1555079365769},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1555079368654},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1555079368646},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1555079368645},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1555079368646},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1555079368647},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1555079368639},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1555079368639},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1555079368654},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1555079368595},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1555079368592},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1555079369253},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1555079369252},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1555079369252},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1555079368594},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1555079369242},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1555079369244},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1555079369243},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555079368447},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1555079368594},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555079368470},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555079368474},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555079368474},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555079368472},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555079368443},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555079368461},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555079368446},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555079368414},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555079368439},{"_id":"themes/next/source/images/alipay.jpg","hash":"86eaf849f8c769721b74b85900b8fdb7e4c73c77","modified":1555482893539},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555079368431},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555079368445},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555079368441},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555079368457},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555079368452},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1555079368478},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1555079368488},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1555079368481},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1555079368479},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1555079368487},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1555079368510},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1555079368505},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1555079368484},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555079368468},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555079368465},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1555079368476},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555079368470},{"_id":"themes/next/source/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1555079368483},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1555079369389},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1555079369391},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1555079369394},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1555079369393},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1555079369352},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1555079369357},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1555079369354},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1555079369330},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1555079369344},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1555079369347},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1555079369350},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1555079369359},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1555079368793},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1555079368776},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1555079368951},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1555079368952},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1555079368949},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1555079369328},{"_id":"source/_posts/ipc-chat/ret.png","hash":"bdc00596fbad84b57fcb9ff2798de70faf6c6cb7","modified":1555521729762},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555079366563},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555079366556},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555079366563},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555079366550},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555079366552},{"_id":"themes/next/source/images/header.jpg","hash":"911f2f298556a3828a2a5c2023ef527431edb011","modified":1555081196852},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1555079369175},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1555079369174},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1555079366568},{"_id":"themes/next/.git/refs/heads/master","hash":"4ba53f1844aa48f65163fb62ebf916ec0cc53822","modified":1555079365846},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1555079366563},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1555079366560},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1555079368652},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1555079368651},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1555079368651},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1555079368650},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1555079368653},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1555079368650},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1555079368653},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1555079368652},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1555079366556},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1555079368637},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1555079368656},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1555079368656},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1555079368657},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1555079368624},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1555079368635},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1555079368631},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1555079368626},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1555079368628},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1555079368622},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1555079368629},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1555079368637},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1555079368620},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1555079368612},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1555079368622},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1555079368613},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1555079368621},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1555079366550},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1555079366552},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1555079366551},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1555079366553},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1555079369241},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1555079369250},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1555079369249},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1555079368644},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1555079368644},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1555079369129},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1555079368643},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1555079369251},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1555079369251},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1555079369126},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1555079369131},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1555079369144},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1555079369146},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1555079368506},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1555079368507},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1555079368947},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1555079368945},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1555079369085},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1555079369087},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1555079369088},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1555079369058},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1555079369054},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1555079369052},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1555079369055},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1555079369169},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1555079369151},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1555079369168},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1555079369163},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1555079368390},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1555079368943},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1555079368392},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1555079368394},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555079368388},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1555079368380},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555079366935},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555079366932},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555079366668},{"_id":"themes/next/source/images/wechatpay.jpg","hash":"367153e2c4b1245adc623c652ecc454822e2150e","modified":1555483462636},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555079367478},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"340bc1d97e71db8a08b6cdd7fa68bf8b53ffe21c","modified":1555079364697},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1555079368946},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1555079366583},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1555079366589},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1555079366594},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1555079366589},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1555079366593},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1555079366608},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1555079366605},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1555079366606},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1555079366604},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1555079366607},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1555079366600},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1555079366588},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1555079366587},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1555079366237},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1555079366448},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1555079366200},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1555079366233},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1555079366202},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1555079366231},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1555079366547},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1555079366235},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"a5305a2fa0b03b1dc1dfd156bb1a590b4819f1f3","modified":1555079366070},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1555079366046},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1555079366055},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1555079366021},{"_id":"themes/next/.git/objects/pack/pack-4aa998d2f43944367c99ca9860f59240e03ef9b3.idx","hash":"d564ebec152ec7eb1755b54ebe021193113b159b","modified":1555079365739},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1555079366067},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1555079366073},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1555079366454},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1555079365826},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1555079366575},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1555079366580},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1555079366577},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1555079366579},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1555079366574},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1555079366578},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555079367498},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555079367977},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555079367786},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555079367788},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555079367431},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555079366586},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555079366604},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1555079366485},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1555079366503},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1555079366506},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1555079366508},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1555079366492},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1555079366497},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1555079366501},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1555079366471},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1555079366473},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1555079366476},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1555079366178},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1555079366176},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1555079366194},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1555079366198},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1555079366196},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1555079366180},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1555079366192},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1555079366219},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1555079366218},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1555079366216},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1555079366225},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1555079366221},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1555079366214},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1555081564271},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1555079366224},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1555079366227},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1555079366229},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1555079366379},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1555079366397},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1555079366404},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1555079366390},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1555079366387},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1555079366370},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1555079366375},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1555079366383},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1555079366373},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1555079366385},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1555079366393},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1555079366400},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1555079366377},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1555079366395},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1555079366389},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1555079366592},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1555079366437},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1555079366402},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1555079366445},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1555079366438},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1555079366440},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1555079366439},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1555079366442},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1555079366444},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1555079366441},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1555079366159},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1555079366173},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1555079366160},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1555079366155},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1555079366157},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1555079366162},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1555079366171},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555079368197},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1555079366163},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555079368366},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"340bc1d97e71db8a08b6cdd7fa68bf8b53ffe21c","modified":1555079364693},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1555079366147},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1555079366165},{"_id":"source/_posts/ipc-chat/windows.png","hash":"62e103ba1ae05e65567752ef7b4fe13722226d1d","modified":1555521721023},{"_id":"source/_posts/ipc-chat/ipcs.png","hash":"f1e25cc2f7a6b4728bbf28fb71764ddf095b7f98","modified":1555521742958},{"_id":"themes/next/.git/objects/pack/pack-4aa998d2f43944367c99ca9860f59240e03ef9b3.pack","hash":"58dfad9842699b7b2fe8efaf9b78dda4a3885f0c","modified":1555079365688},{"_id":"public/atom.xml","hash":"f49b53c2d2178540eb52d301a8e178e1fac1210c","modified":1555557804450},{"_id":"public/content.json","hash":"2f77b9b2a41fda033b90852b44fb2094cdb8c908","modified":1555557804450},{"_id":"public/search.xml","hash":"3f8bc8bd487b1a7918dcb7436d1f130321d55016","modified":1555551820663},{"_id":"public/about/index.html","hash":"ec60e9cade6d4da024d5cc37151f1bcc7f04c501","modified":1555557807224},{"_id":"public/categories/index.html","hash":"13875ed99b9bbc36acdb2f0f12cbf2da6b6686be","modified":1555557807077},{"_id":"public/2019/04/18/ipc-chat/index.html","hash":"d7b4d4b0bfc1cc29c4f7c7b2de6648f615968058","modified":1555557807077},{"_id":"public/2019/04/18/hello-world/index.html","hash":"a97a76147c4005c590ae0a168b3eed609c75c482","modified":1555557807224},{"_id":"public/archives/index.html","hash":"3c8d407152263d3ac343f5f491da4ec3efe490b7","modified":1555557807225},{"_id":"public/categories/IDE/index.html","hash":"d60b67560b947c1b67c4ac441be9f9b060022934","modified":1555557807227},{"_id":"public/tags/index.html","hash":"317b555874ed011b7f8c49cbfc01e523febef36f","modified":1555557807225},{"_id":"public/index.html","hash":"81f3e7227d3b39e1349764c80f1df1d8a0eda2fa","modified":1555557807084},{"_id":"public/categories/Programing/index.html","hash":"e52d6851bf3730983711c904764da65cc65b8924","modified":1555557807227},{"_id":"public/archives/2019/index.html","hash":"55db42591332781af28820f19de09fdf70ae5333","modified":1555557807225},{"_id":"public/tags/Linux/index.html","hash":"9dc2ed511d6b9a7f6497cac45f5294738c3ec230","modified":1555557807225},{"_id":"public/tags/LAMP/index.html","hash":"ef6200f709d7872e9df7bed9da3ae7b727dcf9b0","modified":1555557807226},{"_id":"public/tags/MVC/index.html","hash":"23d6af4bd43587b476c28199d43796ea438e35a7","modified":1555557807227},{"_id":"public/archives/2019/04/index.html","hash":"5bcc468887ee654f35f4910b8a39fac4ef6de54e","modified":1555557807226},{"_id":"public/tags/共享内存/index.html","hash":"4ece7c452a2cf899c6959419250c2b7d0c185978","modified":1555557807226},{"_id":"public/tags/IPC/index.html","hash":"460b19fe17061bcd23bf6460f03b7ef8715569f6","modified":1555557807226},{"_id":"public/tags/select/index.html","hash":"daae36399a21e61145378b8c9b58d5965a510665","modified":1555557807228},{"_id":"public/tags/信号/index.html","hash":"46fc7ffb5fd7c4b5c2858c94a59356f09f5bbf95","modified":1555557807228},{"_id":"public/tags/Docker/index.html","hash":"c1d013be643cd43c501d76f7d6629ea339121482","modified":1555557807227},{"_id":"public/tags/命名管道/index.html","hash":"a4febc6dfe4efb4da2a8773d7258f96d2f39e3e0","modified":1555557807227},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555551823879},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555551823879},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555551823880},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555551823880},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555551823880},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555551823880},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555551823880},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555551823880},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555551823880},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555551823880},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555551823880},{"_id":"public/images/alipay.jpg","hash":"86eaf849f8c769721b74b85900b8fdb7e4c73c77","modified":1555551823880},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555551823881},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555551823896},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555551823896},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555551823915},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555551823935},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555551824155},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555551824155},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555551824158},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555551824159},{"_id":"public/images/header.jpg","hash":"911f2f298556a3828a2a5c2023ef527431edb011","modified":1555551960769},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555551960878},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555551960940},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1555551961262},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1555551961262},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1555551961268},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1555551961271},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1555551961271},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1555551961272},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1555551961272},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1555551961272},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1555551961272},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1555551961272},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1555551961272},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555551961272},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1555551961272},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1555551961273},{"_id":"public/css/main.css","hash":"c8c423fb655941225717c24caf6d875739f0f33d","modified":1555551961273},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555551961273},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555551961273},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555551961277},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555551961277},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555551961277},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555551961277},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555551961277},{"_id":"public/2019/04/18/ipc-chat/ret.png","hash":"bdc00596fbad84b57fcb9ff2798de70faf6c6cb7","modified":1555551961286},{"_id":"public/images/wechatpay.jpg","hash":"367153e2c4b1245adc623c652ecc454822e2150e","modified":1555551961286},{"_id":"public/2019/04/18/ipc-chat/windows.png","hash":"62e103ba1ae05e65567752ef7b4fe13722226d1d","modified":1555551961998},{"_id":"public/2019/04/18/ipc-chat/ipcs.png","hash":"f1e25cc2f7a6b4728bbf28fb71764ddf095b7f98","modified":1555551962136}],"Category":[{"name":"IDE","_id":"cjulzdfgz0004p3yo5asumkyv"},{"name":"Programing","_id":"cjulzdfh30006p3yof2sbxp3s"}],"Data":[],"Page":[{"title":"杨宇","subtitle":"18640301517 | icoty.yangy@gamil.com","date":"2019-04-12T14:41:48.000Z","type":"about","_content":"## ME\n* 男 / 1992\n* QQ/WeChat：604381117\n*  1864030**** / icoty.yangy@gmail.com\n*  技术博客：https://icoty.github.io\n*  Leetcode：https://github.com/icoty/LeetCode\n\n## EDUCATION\n\n- 北京大学 - 软件工程 / 2018.09～至今\n- 东北大学 - 工业工程 / 2011.09～2015.07\n\n## EXPERIENCE\n\n### 浙江大华（ 2018年2月 ~ 2018年9月 ）\n\n#### 第三方SDK集成\n- 项目说明：客户的平台通过调用中间SDK API与公司内部平台通信。\n- 功能实现：\n   1. 在SDK进程中嵌入一个RTSP Client从公司内部平台拉取音视频流之后调用客户的SDK API接口直接推给客户的平台；\n   2. 在SDK进程中开启一个RPC Client与公司的内部平台通信，SDK进程接收到SDK API的通知消息（由客户的平台发送过来）后立即封装成RPC请求交给RPC Client处理。 \n- 相关技术：RTSP拉流，RPC，网络编程，函数指针与函数回调。\n\n#### 第三方智能算法集成\n- 项目说明：内部应用采集的音视频流，需要进行智能算法分析（如人脸检测，区域检测，车辆检测等），客户自己提供了一套算法库来分析这些过程，同时客户也自己开发了一个web界面需要与其自己的算法库通信，由于网络安全限制，客户的web请求不能直接与其自己的算法库通信，必须经由内部应用转发。\n- 功能实现：\n   1. 三方算法库进程集成HttpServer专职接受第三方web请求，然后回调至算法库内部；\n   2. 三方算法库进程集成RpcClient专职接受经算法库处理后的元数据，然后发送到内部应用的RpcServer端口进行处理；\n   3. 开辟两个共享内存专职把内部采集的到音视频传送到算法库进程。\n- 相关技术：Http，共享内存，SDK。\n\n### 矩阵元（深圳）技术 （ 2017年4月 ~ 2017年10月 ）\n\n#### Jenkins持续集成工具\n- 项目说明：通过Jenkins管理产品分支，持续集成工具部署\n-  功能实现：\n   1. Jenkins搭建与配置；\n   2. Redhat与Centos平台的版本功能持续验证，Docker平台的探索；\n   3. Shell脚本，集代码分支、编译、测试、安装、Docker镜像制作和版本发布为一体；\n   4. 对接Android、IOS、Web端联调、输出详细设计文档。\n\n## ARTICLE\n\n- [进程间通信-利用共享内存和管道通信实现聊天窗口](https://icoty.github.io/2019/04/18/ipc-chat/)\n\n## SKILLS\n- Linux/vim/Makefile/gcc/gdb\n- Mysql\n- C/C++/STL\n- TCP/Socket/Epoll/IPC\n- Shell\n- Docker\n- Http\n- Nginx\n- 数据结构\n- 微信小程序开发\n- Python/MVP框架\n- ThinkPHP/MVC框架","source":"about/index.md","raw":"---\ntitle: 杨宇\nsubtitle: 18640301517 | icoty.yangy@gamil.com\ndate: 2019-04-12 22:41:48\ntype: \"about\"\n---\n## ME\n* 男 / 1992\n* QQ/WeChat：604381117\n*  1864030**** / icoty.yangy@gmail.com\n*  技术博客：https://icoty.github.io\n*  Leetcode：https://github.com/icoty/LeetCode\n\n## EDUCATION\n\n- 北京大学 - 软件工程 / 2018.09～至今\n- 东北大学 - 工业工程 / 2011.09～2015.07\n\n## EXPERIENCE\n\n### 浙江大华（ 2018年2月 ~ 2018年9月 ）\n\n#### 第三方SDK集成\n- 项目说明：客户的平台通过调用中间SDK API与公司内部平台通信。\n- 功能实现：\n   1. 在SDK进程中嵌入一个RTSP Client从公司内部平台拉取音视频流之后调用客户的SDK API接口直接推给客户的平台；\n   2. 在SDK进程中开启一个RPC Client与公司的内部平台通信，SDK进程接收到SDK API的通知消息（由客户的平台发送过来）后立即封装成RPC请求交给RPC Client处理。 \n- 相关技术：RTSP拉流，RPC，网络编程，函数指针与函数回调。\n\n#### 第三方智能算法集成\n- 项目说明：内部应用采集的音视频流，需要进行智能算法分析（如人脸检测，区域检测，车辆检测等），客户自己提供了一套算法库来分析这些过程，同时客户也自己开发了一个web界面需要与其自己的算法库通信，由于网络安全限制，客户的web请求不能直接与其自己的算法库通信，必须经由内部应用转发。\n- 功能实现：\n   1. 三方算法库进程集成HttpServer专职接受第三方web请求，然后回调至算法库内部；\n   2. 三方算法库进程集成RpcClient专职接受经算法库处理后的元数据，然后发送到内部应用的RpcServer端口进行处理；\n   3. 开辟两个共享内存专职把内部采集的到音视频传送到算法库进程。\n- 相关技术：Http，共享内存，SDK。\n\n### 矩阵元（深圳）技术 （ 2017年4月 ~ 2017年10月 ）\n\n#### Jenkins持续集成工具\n- 项目说明：通过Jenkins管理产品分支，持续集成工具部署\n-  功能实现：\n   1. Jenkins搭建与配置；\n   2. Redhat与Centos平台的版本功能持续验证，Docker平台的探索；\n   3. Shell脚本，集代码分支、编译、测试、安装、Docker镜像制作和版本发布为一体；\n   4. 对接Android、IOS、Web端联调、输出详细设计文档。\n\n## ARTICLE\n\n- [进程间通信-利用共享内存和管道通信实现聊天窗口](https://icoty.github.io/2019/04/18/ipc-chat/)\n\n## SKILLS\n- Linux/vim/Makefile/gcc/gdb\n- Mysql\n- C/C++/STL\n- TCP/Socket/Epoll/IPC\n- Shell\n- Docker\n- Http\n- Nginx\n- 数据结构\n- 微信小程序开发\n- Python/MVP框架\n- ThinkPHP/MVC框架","updated":"2019-04-17T18:21:20.491Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjulzdfgt0001p3yohd8ju1l3","content":"<h2 id=\"ME\"><a href=\"#ME\" class=\"headerlink\" title=\"ME\"></a>ME</h2><ul>\n<li>男 / 1992</li>\n<li>QQ/WeChat：604381117</li>\n<li>1864030<em>**</em> / <a href=\"mailto:icoty.yangy@gmail.com\" target=\"_blank\" rel=\"noopener\">icoty.yangy@gmail.com</a></li>\n<li>技术博客：<a href=\"https://icoty.github.io\" target=\"_blank\" rel=\"noopener\">https://icoty.github.io</a></li>\n<li>Leetcode：<a href=\"https://github.com/icoty/LeetCode\" target=\"_blank\" rel=\"noopener\">https://github.com/icoty/LeetCode</a></li>\n</ul>\n<h2 id=\"EDUCATION\"><a href=\"#EDUCATION\" class=\"headerlink\" title=\"EDUCATION\"></a>EDUCATION</h2><ul>\n<li>北京大学 - 软件工程 / 2018.09～至今</li>\n<li>东北大学 - 工业工程 / 2011.09～2015.07</li>\n</ul>\n<h2 id=\"EXPERIENCE\"><a href=\"#EXPERIENCE\" class=\"headerlink\" title=\"EXPERIENCE\"></a>EXPERIENCE</h2><h3 id=\"浙江大华（-2018年2月-2018年9月-）\"><a href=\"#浙江大华（-2018年2月-2018年9月-）\" class=\"headerlink\" title=\"浙江大华（ 2018年2月 ~ 2018年9月 ）\"></a>浙江大华（ 2018年2月 ~ 2018年9月 ）</h3><h4 id=\"第三方SDK集成\"><a href=\"#第三方SDK集成\" class=\"headerlink\" title=\"第三方SDK集成\"></a>第三方SDK集成</h4><ul>\n<li>项目说明：客户的平台通过调用中间SDK API与公司内部平台通信。</li>\n<li>功能实现：<ol>\n<li>在SDK进程中嵌入一个RTSP Client从公司内部平台拉取音视频流之后调用客户的SDK API接口直接推给客户的平台；</li>\n<li>在SDK进程中开启一个RPC Client与公司的内部平台通信，SDK进程接收到SDK API的通知消息（由客户的平台发送过来）后立即封装成RPC请求交给RPC Client处理。 </li>\n</ol>\n</li>\n<li>相关技术：RTSP拉流，RPC，网络编程，函数指针与函数回调。</li>\n</ul>\n<h4 id=\"第三方智能算法集成\"><a href=\"#第三方智能算法集成\" class=\"headerlink\" title=\"第三方智能算法集成\"></a>第三方智能算法集成</h4><ul>\n<li>项目说明：内部应用采集的音视频流，需要进行智能算法分析（如人脸检测，区域检测，车辆检测等），客户自己提供了一套算法库来分析这些过程，同时客户也自己开发了一个web界面需要与其自己的算法库通信，由于网络安全限制，客户的web请求不能直接与其自己的算法库通信，必须经由内部应用转发。</li>\n<li>功能实现：<ol>\n<li>三方算法库进程集成HttpServer专职接受第三方web请求，然后回调至算法库内部；</li>\n<li>三方算法库进程集成RpcClient专职接受经算法库处理后的元数据，然后发送到内部应用的RpcServer端口进行处理；</li>\n<li>开辟两个共享内存专职把内部采集的到音视频传送到算法库进程。</li>\n</ol>\n</li>\n<li>相关技术：Http，共享内存，SDK。</li>\n</ul>\n<h3 id=\"矩阵元（深圳）技术-（-2017年4月-2017年10月-）\"><a href=\"#矩阵元（深圳）技术-（-2017年4月-2017年10月-）\" class=\"headerlink\" title=\"矩阵元（深圳）技术 （ 2017年4月 ~ 2017年10月 ）\"></a>矩阵元（深圳）技术 （ 2017年4月 ~ 2017年10月 ）</h3><h4 id=\"Jenkins持续集成工具\"><a href=\"#Jenkins持续集成工具\" class=\"headerlink\" title=\"Jenkins持续集成工具\"></a>Jenkins持续集成工具</h4><ul>\n<li>项目说明：通过Jenkins管理产品分支，持续集成工具部署</li>\n<li>功能实现：<ol>\n<li>Jenkins搭建与配置；</li>\n<li>Redhat与Centos平台的版本功能持续验证，Docker平台的探索；</li>\n<li>Shell脚本，集代码分支、编译、测试、安装、Docker镜像制作和版本发布为一体；</li>\n<li>对接Android、IOS、Web端联调、输出详细设计文档。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"ARTICLE\"><a href=\"#ARTICLE\" class=\"headerlink\" title=\"ARTICLE\"></a>ARTICLE</h2><ul>\n<li><a href=\"https://icoty.github.io/2019/04/18/ipc-chat/\" target=\"_blank\" rel=\"noopener\">进程间通信-利用共享内存和管道通信实现聊天窗口</a></li>\n</ul>\n<h2 id=\"SKILLS\"><a href=\"#SKILLS\" class=\"headerlink\" title=\"SKILLS\"></a>SKILLS</h2><ul>\n<li>Linux/vim/Makefile/gcc/gdb</li>\n<li>Mysql</li>\n<li>C/C++/STL</li>\n<li>TCP/Socket/Epoll/IPC</li>\n<li>Shell</li>\n<li>Docker</li>\n<li>Http</li>\n<li>Nginx</li>\n<li>数据结构</li>\n<li>微信小程序开发</li>\n<li>Python/MVP框架</li>\n<li>ThinkPHP/MVC框架</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"ME\"><a href=\"#ME\" class=\"headerlink\" title=\"ME\"></a>ME</h2><ul>\n<li>男 / 1992</li>\n<li>QQ/WeChat：604381117</li>\n<li>1864030<em>**</em> / <a href=\"mailto:icoty.yangy@gmail.com\" target=\"_blank\" rel=\"noopener\">icoty.yangy@gmail.com</a></li>\n<li>技术博客：<a href=\"https://icoty.github.io\" target=\"_blank\" rel=\"noopener\">https://icoty.github.io</a></li>\n<li>Leetcode：<a href=\"https://github.com/icoty/LeetCode\" target=\"_blank\" rel=\"noopener\">https://github.com/icoty/LeetCode</a></li>\n</ul>\n<h2 id=\"EDUCATION\"><a href=\"#EDUCATION\" class=\"headerlink\" title=\"EDUCATION\"></a>EDUCATION</h2><ul>\n<li>北京大学 - 软件工程 / 2018.09～至今</li>\n<li>东北大学 - 工业工程 / 2011.09～2015.07</li>\n</ul>\n<h2 id=\"EXPERIENCE\"><a href=\"#EXPERIENCE\" class=\"headerlink\" title=\"EXPERIENCE\"></a>EXPERIENCE</h2><h3 id=\"浙江大华（-2018年2月-2018年9月-）\"><a href=\"#浙江大华（-2018年2月-2018年9月-）\" class=\"headerlink\" title=\"浙江大华（ 2018年2月 ~ 2018年9月 ）\"></a>浙江大华（ 2018年2月 ~ 2018年9月 ）</h3><h4 id=\"第三方SDK集成\"><a href=\"#第三方SDK集成\" class=\"headerlink\" title=\"第三方SDK集成\"></a>第三方SDK集成</h4><ul>\n<li>项目说明：客户的平台通过调用中间SDK API与公司内部平台通信。</li>\n<li>功能实现：<ol>\n<li>在SDK进程中嵌入一个RTSP Client从公司内部平台拉取音视频流之后调用客户的SDK API接口直接推给客户的平台；</li>\n<li>在SDK进程中开启一个RPC Client与公司的内部平台通信，SDK进程接收到SDK API的通知消息（由客户的平台发送过来）后立即封装成RPC请求交给RPC Client处理。 </li>\n</ol>\n</li>\n<li>相关技术：RTSP拉流，RPC，网络编程，函数指针与函数回调。</li>\n</ul>\n<h4 id=\"第三方智能算法集成\"><a href=\"#第三方智能算法集成\" class=\"headerlink\" title=\"第三方智能算法集成\"></a>第三方智能算法集成</h4><ul>\n<li>项目说明：内部应用采集的音视频流，需要进行智能算法分析（如人脸检测，区域检测，车辆检测等），客户自己提供了一套算法库来分析这些过程，同时客户也自己开发了一个web界面需要与其自己的算法库通信，由于网络安全限制，客户的web请求不能直接与其自己的算法库通信，必须经由内部应用转发。</li>\n<li>功能实现：<ol>\n<li>三方算法库进程集成HttpServer专职接受第三方web请求，然后回调至算法库内部；</li>\n<li>三方算法库进程集成RpcClient专职接受经算法库处理后的元数据，然后发送到内部应用的RpcServer端口进行处理；</li>\n<li>开辟两个共享内存专职把内部采集的到音视频传送到算法库进程。</li>\n</ol>\n</li>\n<li>相关技术：Http，共享内存，SDK。</li>\n</ul>\n<h3 id=\"矩阵元（深圳）技术-（-2017年4月-2017年10月-）\"><a href=\"#矩阵元（深圳）技术-（-2017年4月-2017年10月-）\" class=\"headerlink\" title=\"矩阵元（深圳）技术 （ 2017年4月 ~ 2017年10月 ）\"></a>矩阵元（深圳）技术 （ 2017年4月 ~ 2017年10月 ）</h3><h4 id=\"Jenkins持续集成工具\"><a href=\"#Jenkins持续集成工具\" class=\"headerlink\" title=\"Jenkins持续集成工具\"></a>Jenkins持续集成工具</h4><ul>\n<li>项目说明：通过Jenkins管理产品分支，持续集成工具部署</li>\n<li>功能实现：<ol>\n<li>Jenkins搭建与配置；</li>\n<li>Redhat与Centos平台的版本功能持续验证，Docker平台的探索；</li>\n<li>Shell脚本，集代码分支、编译、测试、安装、Docker镜像制作和版本发布为一体；</li>\n<li>对接Android、IOS、Web端联调、输出详细设计文档。</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"ARTICLE\"><a href=\"#ARTICLE\" class=\"headerlink\" title=\"ARTICLE\"></a>ARTICLE</h2><ul>\n<li><a href=\"https://icoty.github.io/2019/04/18/ipc-chat/\" target=\"_blank\" rel=\"noopener\">进程间通信-利用共享内存和管道通信实现聊天窗口</a></li>\n</ul>\n<h2 id=\"SKILLS\"><a href=\"#SKILLS\" class=\"headerlink\" title=\"SKILLS\"></a>SKILLS</h2><ul>\n<li>Linux/vim/Makefile/gcc/gdb</li>\n<li>Mysql</li>\n<li>C/C++/STL</li>\n<li>TCP/Socket/Epoll/IPC</li>\n<li>Shell</li>\n<li>Docker</li>\n<li>Http</li>\n<li>Nginx</li>\n<li>数据结构</li>\n<li>微信小程序开发</li>\n<li>Python/MVP框架</li>\n<li>ThinkPHP/MVC框架</li>\n</ul>\n"},{"title":"分类","date":"2019-04-12T14:45:46.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2019-04-12 22:45:46\ntype: \"categories\"\n---\n","updated":"2019-04-13T09:28:17.759Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjulzdfgx0003p3yoq7ylxfwu","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2019-04-12T14:45:34.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2019-04-12 22:45:34\ntype: \"tags\"\n---\n","updated":"2019-04-13T09:28:12.902Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjulzdfoc000sp3yoa60bj3ug","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Linux下Docker快速部署LAMP","_content":"若你的mac或Linux环境上未安装Docker，请移步[Docker安装](http://www.runoob.com/docker/ubuntu-docker-install.html)，确认安装成功之后再进行下文内容。\n\n## Quick Start\n\n### 获取基础镜像\n\n``` bash\n$ docker pull tutum/lamp  # 从Docker Hub上的tutum用户的仓库获取lamp镜像\n$ docker images  # 列出所有的镜像，会发现多一条记录：tutum/lamp\n```\n本文用的镜像源[tutum/lamp](https://hub.docker.com/r/tutum/lamp)，目前Docker 官方维护了一个公共仓库 Docker Hub，其中已经包括了数量超过 15,000 的镜像，开发者可以注册自己的账号，并自定义自己的镜像进行存储，需要的时候可以直接拿来用，同时也能够分享，有点类似于Github。如想注册可移步 [Docker Hub](https://hub.docker.com)。\n\n### 自定义你的镜像\n\n在一个空的目录下新建Dockerfile文件名，填入如下4行内容。\n``` bash\nFROM tutum/lamp:latest  # 表示在镜像tutum/lamp:latest之上自定义你的镜像\nRUN rm -fr /app  # 后面会把你的php项目映射到容器的/app/目录下\nEXPOSE 80 3306   # 暴露80 3306端口\nCMD [\"/run.sh\"]   # 当容器启动后会自动执行容器内部的/run.sh脚本\n```\n在Dockerfile的同级目录执行如下命令，该命令会去执行Dockerfile脚本，并构建新的镜像username/my-lamp-app，其中my-lamp-app为自定义的镜像名字，命名成你的即可。如果注册了docker hub，一般将username换层你的用户名，如未注册，可以随便取。我执行的是：“docker build -t icoty1/lamp .”\n``` bash\n$ docker build -t username/my-lamp-app .\n```\n\n### 基于你的镜像运行一个容器\n\n``` bash\n$ docker run -d -v /home/icoty/app/:/app/ -p 80:80 -p 3306:3306 username/my-lamp-app\n```\n1. -v /home/icoty/app/:/app/ 表示将/home/icoty/app/目录映射到容器内部的/app/目录，其中/home/icoty/app/为我的php项目存放位置，需要换成你的。\n2. -p 80:80 表示将本机的80端口映射到容器内部的80端口，在容器外面是无法直接访问容器内部端口的，映射后才可以，这样当本机80端口收到数据后会自动转发给容器内部的80端口，不过在容器内部是可以直接访问其他远程主机的，这点保证了容器的封闭性和安全性。\n3. username/my-lamp-app 为前面自定义的镜像名称。\n\n### 权限修改\n\n``` bash\n$ docker ps -a   # 查看上一步运行的容器，找到username/my-lamp-app对应的CONTAINER ID\n$ docker exec -it ID /bin/bash   # 根据容器ID进入容器，其中ID为前一句找到的CONTAINER ID\n$ chown -R www-data:www-data /app/   # 将php项目目录权限修改为运行apache的用户组，否则会因为权限不够，web页面打不开\n```\n\n### 访问测试\n\n``` bash\nhttp://ip/public/index.php\n```\n注意：/app/目录下的各个子目录下如果存在.htaccess 文件，会导致web页面无法访问对应子目录，只需将.htaccess重命名为.htaccess.bak即可解决。","source":"_posts/hello-world.md","raw":"---\ntitle: Linux下Docker快速部署LAMP\ntags: [LAMP, Docker, Linux, MVC]\ncategories: [IDE]\n---\n若你的mac或Linux环境上未安装Docker，请移步[Docker安装](http://www.runoob.com/docker/ubuntu-docker-install.html)，确认安装成功之后再进行下文内容。\n\n## Quick Start\n\n### 获取基础镜像\n\n``` bash\n$ docker pull tutum/lamp  # 从Docker Hub上的tutum用户的仓库获取lamp镜像\n$ docker images  # 列出所有的镜像，会发现多一条记录：tutum/lamp\n```\n本文用的镜像源[tutum/lamp](https://hub.docker.com/r/tutum/lamp)，目前Docker 官方维护了一个公共仓库 Docker Hub，其中已经包括了数量超过 15,000 的镜像，开发者可以注册自己的账号，并自定义自己的镜像进行存储，需要的时候可以直接拿来用，同时也能够分享，有点类似于Github。如想注册可移步 [Docker Hub](https://hub.docker.com)。\n\n### 自定义你的镜像\n\n在一个空的目录下新建Dockerfile文件名，填入如下4行内容。\n``` bash\nFROM tutum/lamp:latest  # 表示在镜像tutum/lamp:latest之上自定义你的镜像\nRUN rm -fr /app  # 后面会把你的php项目映射到容器的/app/目录下\nEXPOSE 80 3306   # 暴露80 3306端口\nCMD [\"/run.sh\"]   # 当容器启动后会自动执行容器内部的/run.sh脚本\n```\n在Dockerfile的同级目录执行如下命令，该命令会去执行Dockerfile脚本，并构建新的镜像username/my-lamp-app，其中my-lamp-app为自定义的镜像名字，命名成你的即可。如果注册了docker hub，一般将username换层你的用户名，如未注册，可以随便取。我执行的是：“docker build -t icoty1/lamp .”\n``` bash\n$ docker build -t username/my-lamp-app .\n```\n\n### 基于你的镜像运行一个容器\n\n``` bash\n$ docker run -d -v /home/icoty/app/:/app/ -p 80:80 -p 3306:3306 username/my-lamp-app\n```\n1. -v /home/icoty/app/:/app/ 表示将/home/icoty/app/目录映射到容器内部的/app/目录，其中/home/icoty/app/为我的php项目存放位置，需要换成你的。\n2. -p 80:80 表示将本机的80端口映射到容器内部的80端口，在容器外面是无法直接访问容器内部端口的，映射后才可以，这样当本机80端口收到数据后会自动转发给容器内部的80端口，不过在容器内部是可以直接访问其他远程主机的，这点保证了容器的封闭性和安全性。\n3. username/my-lamp-app 为前面自定义的镜像名称。\n\n### 权限修改\n\n``` bash\n$ docker ps -a   # 查看上一步运行的容器，找到username/my-lamp-app对应的CONTAINER ID\n$ docker exec -it ID /bin/bash   # 根据容器ID进入容器，其中ID为前一句找到的CONTAINER ID\n$ chown -R www-data:www-data /app/   # 将php项目目录权限修改为运行apache的用户组，否则会因为权限不够，web页面打不开\n```\n\n### 访问测试\n\n``` bash\nhttp://ip/public/index.php\n```\n注意：/app/目录下的各个子目录下如果存在.htaccess 文件，会导致web页面无法访问对应子目录，只需将.htaccess重命名为.htaccess.bak即可解决。","slug":"hello-world","published":1,"date":"2019-04-17T17:36:13.860Z","updated":"2019-04-16T15:11:13.554Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjulzdfgl0000p3yo93lt6gyw","content":"<p>若你的mac或Linux环境上未安装Docker，请移步<a href=\"http://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"noopener\">Docker安装</a>，确认安装成功之后再进行下文内容。</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"获取基础镜像\"><a href=\"#获取基础镜像\" class=\"headerlink\" title=\"获取基础镜像\"></a>获取基础镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull tutum/lamp  <span class=\"comment\"># 从Docker Hub上的tutum用户的仓库获取lamp镜像</span></span><br><span class=\"line\">$ docker images  <span class=\"comment\"># 列出所有的镜像，会发现多一条记录：tutum/lamp</span></span><br></pre></td></tr></table></figure>\n<p>本文用的镜像源<a href=\"https://hub.docker.com/r/tutum/lamp\" target=\"_blank\" rel=\"noopener\">tutum/lamp</a>，目前Docker 官方维护了一个公共仓库 Docker Hub，其中已经包括了数量超过 15,000 的镜像，开发者可以注册自己的账号，并自定义自己的镜像进行存储，需要的时候可以直接拿来用，同时也能够分享，有点类似于Github。如想注册可移步 <a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>。</p>\n<h3 id=\"自定义你的镜像\"><a href=\"#自定义你的镜像\" class=\"headerlink\" title=\"自定义你的镜像\"></a>自定义你的镜像</h3><p>在一个空的目录下新建Dockerfile文件名，填入如下4行内容。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM tutum/lamp:latest  <span class=\"comment\"># 表示在镜像tutum/lamp:latest之上自定义你的镜像</span></span><br><span class=\"line\">RUN rm -fr /app  <span class=\"comment\"># 后面会把你的php项目映射到容器的/app/目录下</span></span><br><span class=\"line\">EXPOSE 80 3306   <span class=\"comment\"># 暴露80 3306端口</span></span><br><span class=\"line\">CMD [<span class=\"string\">\"/run.sh\"</span>]   <span class=\"comment\"># 当容器启动后会自动执行容器内部的/run.sh脚本</span></span><br></pre></td></tr></table></figure></p>\n<p>在Dockerfile的同级目录执行如下命令，该命令会去执行Dockerfile脚本，并构建新的镜像username/my-lamp-app，其中my-lamp-app为自定义的镜像名字，命名成你的即可。如果注册了docker hub，一般将username换层你的用户名，如未注册，可以随便取。我执行的是：“docker build -t icoty1/lamp .”<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t username/my-lamp-app .</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基于你的镜像运行一个容器\"><a href=\"#基于你的镜像运行一个容器\" class=\"headerlink\" title=\"基于你的镜像运行一个容器\"></a>基于你的镜像运行一个容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -v /home/icoty/app/:/app/ -p 80:80 -p 3306:3306 username/my-lamp-app</span><br></pre></td></tr></table></figure>\n<ol>\n<li>-v /home/icoty/app/:/app/ 表示将/home/icoty/app/目录映射到容器内部的/app/目录，其中/home/icoty/app/为我的php项目存放位置，需要换成你的。</li>\n<li>-p 80:80 表示将本机的80端口映射到容器内部的80端口，在容器外面是无法直接访问容器内部端口的，映射后才可以，这样当本机80端口收到数据后会自动转发给容器内部的80端口，不过在容器内部是可以直接访问其他远程主机的，这点保证了容器的封闭性和安全性。</li>\n<li>username/my-lamp-app 为前面自定义的镜像名称。</li>\n</ol>\n<h3 id=\"权限修改\"><a href=\"#权限修改\" class=\"headerlink\" title=\"权限修改\"></a>权限修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a   <span class=\"comment\"># 查看上一步运行的容器，找到username/my-lamp-app对应的CONTAINER ID</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it ID /bin/bash   <span class=\"comment\"># 根据容器ID进入容器，其中ID为前一句找到的CONTAINER ID</span></span><br><span class=\"line\">$ chown -R www-data:www-data /app/   <span class=\"comment\"># 将php项目目录权限修改为运行apache的用户组，否则会因为权限不够，web页面打不开</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://ip/public/index.php</span><br></pre></td></tr></table></figure>\n<p>注意：/app/目录下的各个子目录下如果存在.htaccess 文件，会导致web页面无法访问对应子目录，只需将.htaccess重命名为.htaccess.bak即可解决。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>若你的mac或Linux环境上未安装Docker，请移步<a href=\"http://www.runoob.com/docker/ubuntu-docker-install.html\" target=\"_blank\" rel=\"noopener\">Docker安装</a>，确认安装成功之后再进行下文内容。</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"获取基础镜像\"><a href=\"#获取基础镜像\" class=\"headerlink\" title=\"获取基础镜像\"></a>获取基础镜像</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker pull tutum/lamp  <span class=\"comment\"># 从Docker Hub上的tutum用户的仓库获取lamp镜像</span></span><br><span class=\"line\">$ docker images  <span class=\"comment\"># 列出所有的镜像，会发现多一条记录：tutum/lamp</span></span><br></pre></td></tr></table></figure>\n<p>本文用的镜像源<a href=\"https://hub.docker.com/r/tutum/lamp\" target=\"_blank\" rel=\"noopener\">tutum/lamp</a>，目前Docker 官方维护了一个公共仓库 Docker Hub，其中已经包括了数量超过 15,000 的镜像，开发者可以注册自己的账号，并自定义自己的镜像进行存储，需要的时候可以直接拿来用，同时也能够分享，有点类似于Github。如想注册可移步 <a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener\">Docker Hub</a>。</p>\n<h3 id=\"自定义你的镜像\"><a href=\"#自定义你的镜像\" class=\"headerlink\" title=\"自定义你的镜像\"></a>自定义你的镜像</h3><p>在一个空的目录下新建Dockerfile文件名，填入如下4行内容。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM tutum/lamp:latest  <span class=\"comment\"># 表示在镜像tutum/lamp:latest之上自定义你的镜像</span></span><br><span class=\"line\">RUN rm -fr /app  <span class=\"comment\"># 后面会把你的php项目映射到容器的/app/目录下</span></span><br><span class=\"line\">EXPOSE 80 3306   <span class=\"comment\"># 暴露80 3306端口</span></span><br><span class=\"line\">CMD [<span class=\"string\">\"/run.sh\"</span>]   <span class=\"comment\"># 当容器启动后会自动执行容器内部的/run.sh脚本</span></span><br></pre></td></tr></table></figure></p>\n<p>在Dockerfile的同级目录执行如下命令，该命令会去执行Dockerfile脚本，并构建新的镜像username/my-lamp-app，其中my-lamp-app为自定义的镜像名字，命名成你的即可。如果注册了docker hub，一般将username换层你的用户名，如未注册，可以随便取。我执行的是：“docker build -t icoty1/lamp .”<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker build -t username/my-lamp-app .</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"基于你的镜像运行一个容器\"><a href=\"#基于你的镜像运行一个容器\" class=\"headerlink\" title=\"基于你的镜像运行一个容器\"></a>基于你的镜像运行一个容器</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker run -d -v /home/icoty/app/:/app/ -p 80:80 -p 3306:3306 username/my-lamp-app</span><br></pre></td></tr></table></figure>\n<ol>\n<li>-v /home/icoty/app/:/app/ 表示将/home/icoty/app/目录映射到容器内部的/app/目录，其中/home/icoty/app/为我的php项目存放位置，需要换成你的。</li>\n<li>-p 80:80 表示将本机的80端口映射到容器内部的80端口，在容器外面是无法直接访问容器内部端口的，映射后才可以，这样当本机80端口收到数据后会自动转发给容器内部的80端口，不过在容器内部是可以直接访问其他远程主机的，这点保证了容器的封闭性和安全性。</li>\n<li>username/my-lamp-app 为前面自定义的镜像名称。</li>\n</ol>\n<h3 id=\"权限修改\"><a href=\"#权限修改\" class=\"headerlink\" title=\"权限修改\"></a>权限修改</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker ps -a   <span class=\"comment\"># 查看上一步运行的容器，找到username/my-lamp-app对应的CONTAINER ID</span></span><br><span class=\"line\">$ docker <span class=\"built_in\">exec</span> -it ID /bin/bash   <span class=\"comment\"># 根据容器ID进入容器，其中ID为前一句找到的CONTAINER ID</span></span><br><span class=\"line\">$ chown -R www-data:www-data /app/   <span class=\"comment\"># 将php项目目录权限修改为运行apache的用户组，否则会因为权限不够，web页面打不开</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"访问测试\"><a href=\"#访问测试\" class=\"headerlink\" title=\"访问测试\"></a>访问测试</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://ip/public/index.php</span><br></pre></td></tr></table></figure>\n<p>注意：/app/目录下的各个子目录下如果存在.htaccess 文件，会导致web页面无法访问对应子目录，只需将.htaccess重命名为.htaccess.bak即可解决。</p>\n"},{"title":"进程间通信-利用共享内存和管道通信实现聊天窗口","date":"2019-04-17T16:16:06.000Z","top":5,"_content":"\n### 问题模型\n\n1. A、B两个进程通过管道通信，A 进程每次接收到的数据通过共享内存传递给A1进程显示，同理，B进程每次接收到的数据通过共享内存传递给B1进程显示；\n2. 对于A、B 进程，采用ctrl+c（实际为SIGINT信号）方式退出，A、B进程通过捕捉SIGINT信号注册信号处理函数进行资源清理，A1、B1进程手动关闭即可。\n![聊天窗口模型](ipc-chat/windows.png)\n\n### 特别注意\n1. A、B通过管道通信，如果首先通过ctrl+c退出A进程，那么B进程的fifo1管道的写端会收到SIGPIPE信号而终止B进程，因此必须在B进程终止前清理掉被B占用的共享内存2，将共享内存2的引用计数减一，否则，当B1进程退出并清理共享内存2后，共享内存2的引用计数不为0，会导致共享内存2得不到释放；\n2. 为了解决前一个问题，A、B进程在启动后立即将各自的进程id通过管道发送给对方，并在各自的进程退出时向对方进程id发送SIGINT信号，触发对方进程进入信号处理接口执行资源回收工作；\n2. A和A1通过共享内存1通信，会从A进程和A1进程的虚拟地址空间分配一段连续的页映射到同一块连续的物理内存页上，这样A、A1两个进程都可以间接访问物理内存页，从而达到通信的目的，一般共享内存需要进行保护，读写不能同时进行，也不能同时进行写操作，共享内存省去了从内核缓冲区到用户缓冲区的拷贝，因此效率高。\n\n### 编码与效果图\n\n![运行结果](ipc-chat/ret.png)\n\nfunc.h:\n``` bash\n#include <stdio.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n#include <strings.h>\n#include <string.h>\n#include <sys/select.h>\n#include <sys/time.h>\n#include <stdlib.h>\n#include <sys/wait.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>\n#include <netinet/in.h>\n#include <stdio.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <netdb.h>\n#include <sys/types.h>\n#include <sys/select.h>\n#include <sys/time.h>\n#include <unistd.h>\n#include <sys/uio.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/ipc.h>\n#include <sys/shm.h> \n```\n\nprocessA.cpp：\n``` bash\n#include \"func.h\"\n\nint shmid;\nint pidB;\t// 存放对端进程B的进程id号\nchar *p;\t// 共享内存指针\n\n// 回收共享内存资源前先杀死对端进程，否则回收失败\nvoid handle(int num)\n{\n\tkill(pidB, SIGINT);\n\tshmdt(p);\n\tint ret;\n\tif(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) \n\t{\n\t\tperror(\"shmctl\");\n\t\treturn (void)-1;\n\t}\n\texit(0);\n}\n\nint main(int argc, char **argv)\n{\n\tsignal(SIGINT, handle);\n\tif(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))  \n\t{\n\t\tperror(\"shmget\");\n\t\treturn -1;\n\t}\n\t\n\tif((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))\n\t{\n\t\tperror(\"shmat\");\n\t\treturn -1;\n\t}\n\t\n\t// 管道文件为单工通信方式，因此需要建立两条管道\n\t// A进程通过管道文件fifo1的读端fdr读取B进程发送的数据\n\t// A进程通过管道文件fifo2的写端fdw向B进程发送数据\n\tint fdr, fdw;\n\tif(-1 == (fdr=open(\"fifo1\", O_RDONLY)) || -1 == (fdw=open(\"fifo2\", O_WRONLY)))\n\t{\n\t\tperror(\"open fifo1 or open fifo2\");\n\t\treturn -1;\n\t}\n\t\n\t// 通信之前先通过管道互相告知对方自己的进程id\n\tchar s1[10] = {0};\n\tchar s2[10] = {0};\n\tsprintf(s1, \"%d\\n\", getpid());\n\twrite(fdw, s1, strlen(s1) - 1);\n\tread(fdr, s2, strlen(s1) - 1);\n\tpidB = atoi(s2);\n\tprintf(\"pipe connect success, A to A1 shmid:[%d], pidA:[%d], pidB:[%d]\\n\", shmid, getpid(), pidB);\n\t\n\tchar buf[1024] = {0};\n\tint ret;\n\tfd_set rdset;\n\twhile(true)\n\t{\n\t\tFD_ZERO(&rdset);\n\t\tFD_SET(0, &rdset);\n\t\tFD_SET(fdr, &rdset);\n\t\tif((ret=select(fdr+1, &rdset, NULL, NULL, NULL) > 0))\n\t\t{\n\t\t\t// fdr可读,则接收数据之后通过共享内存传给A1\n\t\t\tif(FD_ISSET(fdr, &rdset))\n\t\t\t{\n\t\t\t\tbzero(buf, sizeof(buf));\n\t\t\t\tif(read(fdr, buf, sizeof(buf)) > 0)\n\t\t\t\t{\n\t\t\t\t\tstrncpy(p, buf, sizeof(buf));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 标准输入可读,读出来传递给B进程\n\t\t\tif(FD_ISSET(0, &rdset))\n\t\t\t{\n\t\t\t\tbzero(buf, sizeof(buf));\n\t\t\t\tif(read(STDIN_FILENO, buf, sizeof(buf)) > 0)\n\t\t\t\t{\n\t\t\t\t\twrite(fdw, buf, strlen(buf) - 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tclose(fdr);\n\tclose(fdw);\n\treturn 0;\n}\n```\n\nprocessB.cpp：\n``` bash\n#include \"func.h\"\n\nint shmid;\nint pidA;\t// 存放对端进程id\nchar *p;\t// 共享内存指针\n\n// 回收共享内存资源前先杀死对端进程，否则回收失败\nvoid handle(int num)\n{\n\tkill(pidA, SIGINT);\n\tshmdt(p);\n\tint ret;\n\tif(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) \n\t{\n\t\tperror(\"shmctl\");\n\t\treturn (void)-1;\n\t}\n\texit(0);\n}\n\nint main(int argc, char **argv)\n{\n\tsignal(SIGINT, handle);\n\tif(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))\n\t{\n\t\tperror(\"shmget\");\n\t\treturn -1;\n\t}\n\t\n\tif((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))\n\t{\n\t\tperror(\"shmat\");\n\t\treturn -1;\n\t}\n\t\n\t// 管道文件为单工通信方式\n\t// B进程通过管道文件fifo1的写端fdw向A进程发送数据\n\t// B进程通过管道文件fifo2的读端fdr接收A进程的数据\n\tint fdr, fdw;\n\tif(-1 == (fdw=open(\"fifo1\", O_WRONLY)) || -1 == (fdr=open(\"fifo2\", O_RDONLY)))\n\t{\n\t\tperror(\"open fifo1 or open fifo2\");\n\t\treturn -1;\n\t}\n\t\n\t// 通信之前先通过管道互相告知对方自己的进程id\n\tchar s1[10] = {0};\n\tchar s2[10] = {0};\n\tsprintf(s1, \"%d\\n\", getpid());\n\twrite(fdw, s1, strlen(s1) - 1);\n\tread(fdr, s2, strlen(s1) - 1);\n\tpidA = atoi(s2);\n\tprintf(\"pipe connect success, B to B1 shmid:[%d], pidA:[%d], pidB:[%d]\\n\", shmid, pidA, getpid());\n\t\n\tchar buf[1024] = {0};\n\tint ret;\n\tfd_set rdset;\n\twhile(true)\n\t{\n\t\tFD_ZERO(&rdset);\n\t\tFD_SET(0, &rdset);\n\t\tFD_SET(fdr, &rdset);\n\t\tif((ret=select(fdr+1, &rdset, NULL, NULL, NULL) > 0))\n\t\t{\n\t\t\t// fdr可读,则接收数据之后通过共享内存传给B1\n\t\t\tif(FD_ISSET(fdr, &rdset))\n\t\t\t{\n\t\t\t\tbzero(buf, sizeof(buf));\n\t\t\t\tif(read(fdr, buf, sizeof(buf)) > 0)\n\t\t\t\t{\n\t\t\t\t\tstrncpy(p, buf, sizeof(buf));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 标注输入可读,读出来传递给A进程\n\t\t\tif(FD_ISSET(0, &rdset))\n\t\t\t{\n\t\t\t\tbzero(buf, sizeof(buf));\n\t\t\t\tif(read(STDIN_FILENO, buf, sizeof(buf)) > 0)\n\t\t\t\t{\n\t\t\t\t\twrite(fdw, buf, strlen(buf) - 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tclose(fdr);\n\tclose(fdw);\n\treturn 0;\n}\n```\n\nprocessA1.cpp：\n``` bash\n#include \"fuprintf(\"p:%s\\n\", p);nc.h\"\n\nint main(void)\n{\n\tchar buf[1024] = {0};\n\tint shmid;\n\tif(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))\n\t{\n\t\tperror(\"shmget\");\n\t\treturn -1;\n\t}\n\t\n\tchar *p;\n\tif((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))\n\t{\n\t\tperror(\"shmat\");\n\t\treturn -1;\n\t}\n\t\n\twhile(true)\n\t{\n\t\tif(!(strcmp(buf, p)))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// 共享内存有数据可读\n\t\t\tbzero(buf, sizeof(buf));\n\t\t\tstrcpy(buf, p);\n\t\t\tprintf(\"I am A1, recv from A:[%s]\\n\", buf);\n\t\t}\n\t}\n\t\n\tif(-1 ==(shmctl(shmid, IPC_RMID, 0)))\n\t{\n\t\tperror(\"shmctl\");\n\t\treturn -1;\n\t}\n\t\n\treturn 0;\n}\n```\n\nprocessB1.cpp：\n``` bash\n#include \"func.h\"\n\nint main(void)\n{\n\tchar buf[1024] = {0};\n\tint shmid;\n\tif(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))\n\t{\n\t\tperror(\"shmget\");\n\t\treturn -1;\n\t}\n\t\n\tchar *p;\n\tif((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))\n\t{\n\t\tperror(\"shmat\");\n\t\treturn -1;\n\t}\n\t\n\twhile(true)\n\t{\n\t\tif(!(strcmp(buf, p)))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// 共享内存有数据可读\n\t\t\tbzero(buf, sizeof(buf));\n\t\t\tstrcpy(buf, p);\n\t\t\tprintf(\"I am B1, recv from B:[%s]\\n\", buf);\n\t\t}\n\t}\n\t\n\tif(-1 ==(shmctl(shmid, IPC_RMID, 0)))\n\t{\n\t\tperror(\"shmctl\");\n\t\treturn -1;\n\t}\n\t\n\treturn 0;\n}\n```\n\n### 回收资源\n\n1. 这里首先通过ctrl+c退出A进程，然后B进程收到SIGPIPE信号退出，A、B进程同时调用各自的信号处理函数回收资源，通过ipcs命令发现拥有者为root的共享内存资源的nattch都为1，分别被A1和B1占有。\n2. 然后手动关闭A1、B1进程，再次执行ipcs命令，发现拥有者为root的共享内存资源不存在，已经释放成功。\n``` bash\n$ ipcs  # 查看共性内存资源数量\n```\n![资源回收图](ipc-chat/ipcs.png)\n\n### 源码获取\n\n本文所有[源码链接](https://github.com/icoty/Linux/tree/master/IPC/chat)","source":"_posts/ipc-chat.md","raw":"---\ntitle: 进程间通信-利用共享内存和管道通信实现聊天窗口\ndate: 2019-04-18 00:16:06\ntop: 5\ntags: [Linux, IPC, 共享内存, 命名管道, 信号, select]\ncategories: [Programing]\n---\n\n### 问题模型\n\n1. A、B两个进程通过管道通信，A 进程每次接收到的数据通过共享内存传递给A1进程显示，同理，B进程每次接收到的数据通过共享内存传递给B1进程显示；\n2. 对于A、B 进程，采用ctrl+c（实际为SIGINT信号）方式退出，A、B进程通过捕捉SIGINT信号注册信号处理函数进行资源清理，A1、B1进程手动关闭即可。\n![聊天窗口模型](ipc-chat/windows.png)\n\n### 特别注意\n1. A、B通过管道通信，如果首先通过ctrl+c退出A进程，那么B进程的fifo1管道的写端会收到SIGPIPE信号而终止B进程，因此必须在B进程终止前清理掉被B占用的共享内存2，将共享内存2的引用计数减一，否则，当B1进程退出并清理共享内存2后，共享内存2的引用计数不为0，会导致共享内存2得不到释放；\n2. 为了解决前一个问题，A、B进程在启动后立即将各自的进程id通过管道发送给对方，并在各自的进程退出时向对方进程id发送SIGINT信号，触发对方进程进入信号处理接口执行资源回收工作；\n2. A和A1通过共享内存1通信，会从A进程和A1进程的虚拟地址空间分配一段连续的页映射到同一块连续的物理内存页上，这样A、A1两个进程都可以间接访问物理内存页，从而达到通信的目的，一般共享内存需要进行保护，读写不能同时进行，也不能同时进行写操作，共享内存省去了从内核缓冲区到用户缓冲区的拷贝，因此效率高。\n\n### 编码与效果图\n\n![运行结果](ipc-chat/ret.png)\n\nfunc.h:\n``` bash\n#include <stdio.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <unistd.h>\n#include <errno.h>\n#include <strings.h>\n#include <string.h>\n#include <sys/select.h>\n#include <sys/time.h>\n#include <stdlib.h>\n#include <sys/wait.h>\n#include <sys/types.h>\n#include <sys/ipc.h>\n#include <sys/shm.h>\n#include <netinet/in.h>\n#include <stdio.h>\n#include <sys/socket.h>\n#include <arpa/inet.h>\n#include <string.h>\n#include <netdb.h>\n#include <sys/types.h>\n#include <sys/select.h>\n#include <sys/time.h>\n#include <unistd.h>\n#include <sys/uio.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/ipc.h>\n#include <sys/shm.h> \n```\n\nprocessA.cpp：\n``` bash\n#include \"func.h\"\n\nint shmid;\nint pidB;\t// 存放对端进程B的进程id号\nchar *p;\t// 共享内存指针\n\n// 回收共享内存资源前先杀死对端进程，否则回收失败\nvoid handle(int num)\n{\n\tkill(pidB, SIGINT);\n\tshmdt(p);\n\tint ret;\n\tif(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) \n\t{\n\t\tperror(\"shmctl\");\n\t\treturn (void)-1;\n\t}\n\texit(0);\n}\n\nint main(int argc, char **argv)\n{\n\tsignal(SIGINT, handle);\n\tif(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))  \n\t{\n\t\tperror(\"shmget\");\n\t\treturn -1;\n\t}\n\t\n\tif((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))\n\t{\n\t\tperror(\"shmat\");\n\t\treturn -1;\n\t}\n\t\n\t// 管道文件为单工通信方式，因此需要建立两条管道\n\t// A进程通过管道文件fifo1的读端fdr读取B进程发送的数据\n\t// A进程通过管道文件fifo2的写端fdw向B进程发送数据\n\tint fdr, fdw;\n\tif(-1 == (fdr=open(\"fifo1\", O_RDONLY)) || -1 == (fdw=open(\"fifo2\", O_WRONLY)))\n\t{\n\t\tperror(\"open fifo1 or open fifo2\");\n\t\treturn -1;\n\t}\n\t\n\t// 通信之前先通过管道互相告知对方自己的进程id\n\tchar s1[10] = {0};\n\tchar s2[10] = {0};\n\tsprintf(s1, \"%d\\n\", getpid());\n\twrite(fdw, s1, strlen(s1) - 1);\n\tread(fdr, s2, strlen(s1) - 1);\n\tpidB = atoi(s2);\n\tprintf(\"pipe connect success, A to A1 shmid:[%d], pidA:[%d], pidB:[%d]\\n\", shmid, getpid(), pidB);\n\t\n\tchar buf[1024] = {0};\n\tint ret;\n\tfd_set rdset;\n\twhile(true)\n\t{\n\t\tFD_ZERO(&rdset);\n\t\tFD_SET(0, &rdset);\n\t\tFD_SET(fdr, &rdset);\n\t\tif((ret=select(fdr+1, &rdset, NULL, NULL, NULL) > 0))\n\t\t{\n\t\t\t// fdr可读,则接收数据之后通过共享内存传给A1\n\t\t\tif(FD_ISSET(fdr, &rdset))\n\t\t\t{\n\t\t\t\tbzero(buf, sizeof(buf));\n\t\t\t\tif(read(fdr, buf, sizeof(buf)) > 0)\n\t\t\t\t{\n\t\t\t\t\tstrncpy(p, buf, sizeof(buf));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 标准输入可读,读出来传递给B进程\n\t\t\tif(FD_ISSET(0, &rdset))\n\t\t\t{\n\t\t\t\tbzero(buf, sizeof(buf));\n\t\t\t\tif(read(STDIN_FILENO, buf, sizeof(buf)) > 0)\n\t\t\t\t{\n\t\t\t\t\twrite(fdw, buf, strlen(buf) - 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tclose(fdr);\n\tclose(fdw);\n\treturn 0;\n}\n```\n\nprocessB.cpp：\n``` bash\n#include \"func.h\"\n\nint shmid;\nint pidA;\t// 存放对端进程id\nchar *p;\t// 共享内存指针\n\n// 回收共享内存资源前先杀死对端进程，否则回收失败\nvoid handle(int num)\n{\n\tkill(pidA, SIGINT);\n\tshmdt(p);\n\tint ret;\n\tif(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) \n\t{\n\t\tperror(\"shmctl\");\n\t\treturn (void)-1;\n\t}\n\texit(0);\n}\n\nint main(int argc, char **argv)\n{\n\tsignal(SIGINT, handle);\n\tif(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))\n\t{\n\t\tperror(\"shmget\");\n\t\treturn -1;\n\t}\n\t\n\tif((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))\n\t{\n\t\tperror(\"shmat\");\n\t\treturn -1;\n\t}\n\t\n\t// 管道文件为单工通信方式\n\t// B进程通过管道文件fifo1的写端fdw向A进程发送数据\n\t// B进程通过管道文件fifo2的读端fdr接收A进程的数据\n\tint fdr, fdw;\n\tif(-1 == (fdw=open(\"fifo1\", O_WRONLY)) || -1 == (fdr=open(\"fifo2\", O_RDONLY)))\n\t{\n\t\tperror(\"open fifo1 or open fifo2\");\n\t\treturn -1;\n\t}\n\t\n\t// 通信之前先通过管道互相告知对方自己的进程id\n\tchar s1[10] = {0};\n\tchar s2[10] = {0};\n\tsprintf(s1, \"%d\\n\", getpid());\n\twrite(fdw, s1, strlen(s1) - 1);\n\tread(fdr, s2, strlen(s1) - 1);\n\tpidA = atoi(s2);\n\tprintf(\"pipe connect success, B to B1 shmid:[%d], pidA:[%d], pidB:[%d]\\n\", shmid, pidA, getpid());\n\t\n\tchar buf[1024] = {0};\n\tint ret;\n\tfd_set rdset;\n\twhile(true)\n\t{\n\t\tFD_ZERO(&rdset);\n\t\tFD_SET(0, &rdset);\n\t\tFD_SET(fdr, &rdset);\n\t\tif((ret=select(fdr+1, &rdset, NULL, NULL, NULL) > 0))\n\t\t{\n\t\t\t// fdr可读,则接收数据之后通过共享内存传给B1\n\t\t\tif(FD_ISSET(fdr, &rdset))\n\t\t\t{\n\t\t\t\tbzero(buf, sizeof(buf));\n\t\t\t\tif(read(fdr, buf, sizeof(buf)) > 0)\n\t\t\t\t{\n\t\t\t\t\tstrncpy(p, buf, sizeof(buf));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 标注输入可读,读出来传递给A进程\n\t\t\tif(FD_ISSET(0, &rdset))\n\t\t\t{\n\t\t\t\tbzero(buf, sizeof(buf));\n\t\t\t\tif(read(STDIN_FILENO, buf, sizeof(buf)) > 0)\n\t\t\t\t{\n\t\t\t\t\twrite(fdw, buf, strlen(buf) - 1);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tclose(fdr);\n\tclose(fdw);\n\treturn 0;\n}\n```\n\nprocessA1.cpp：\n``` bash\n#include \"fuprintf(\"p:%s\\n\", p);nc.h\"\n\nint main(void)\n{\n\tchar buf[1024] = {0};\n\tint shmid;\n\tif(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))\n\t{\n\t\tperror(\"shmget\");\n\t\treturn -1;\n\t}\n\t\n\tchar *p;\n\tif((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))\n\t{\n\t\tperror(\"shmat\");\n\t\treturn -1;\n\t}\n\t\n\twhile(true)\n\t{\n\t\tif(!(strcmp(buf, p)))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// 共享内存有数据可读\n\t\t\tbzero(buf, sizeof(buf));\n\t\t\tstrcpy(buf, p);\n\t\t\tprintf(\"I am A1, recv from A:[%s]\\n\", buf);\n\t\t}\n\t}\n\t\n\tif(-1 ==(shmctl(shmid, IPC_RMID, 0)))\n\t{\n\t\tperror(\"shmctl\");\n\t\treturn -1;\n\t}\n\t\n\treturn 0;\n}\n```\n\nprocessB1.cpp：\n``` bash\n#include \"func.h\"\n\nint main(void)\n{\n\tchar buf[1024] = {0};\n\tint shmid;\n\tif(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))\n\t{\n\t\tperror(\"shmget\");\n\t\treturn -1;\n\t}\n\t\n\tchar *p;\n\tif((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))\n\t{\n\t\tperror(\"shmat\");\n\t\treturn -1;\n\t}\n\t\n\twhile(true)\n\t{\n\t\tif(!(strcmp(buf, p)))\n\t\t{\n\t\t\tcontinue;\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// 共享内存有数据可读\n\t\t\tbzero(buf, sizeof(buf));\n\t\t\tstrcpy(buf, p);\n\t\t\tprintf(\"I am B1, recv from B:[%s]\\n\", buf);\n\t\t}\n\t}\n\t\n\tif(-1 ==(shmctl(shmid, IPC_RMID, 0)))\n\t{\n\t\tperror(\"shmctl\");\n\t\treturn -1;\n\t}\n\t\n\treturn 0;\n}\n```\n\n### 回收资源\n\n1. 这里首先通过ctrl+c退出A进程，然后B进程收到SIGPIPE信号退出，A、B进程同时调用各自的信号处理函数回收资源，通过ipcs命令发现拥有者为root的共享内存资源的nattch都为1，分别被A1和B1占有。\n2. 然后手动关闭A1、B1进程，再次执行ipcs命令，发现拥有者为root的共享内存资源不存在，已经释放成功。\n``` bash\n$ ipcs  # 查看共性内存资源数量\n```\n![资源回收图](ipc-chat/ipcs.png)\n\n### 源码获取\n\n本文所有[源码链接](https://github.com/icoty/Linux/tree/master/IPC/chat)","slug":"ipc-chat","published":1,"updated":"2019-04-18T02:13:31.331Z","_id":"cjulzdfgu0002p3yo6i4i46l6","comments":1,"layout":"post","photos":[],"link":"","content":"<h3 id=\"问题模型\"><a href=\"#问题模型\" class=\"headerlink\" title=\"问题模型\"></a>问题模型</h3><ol>\n<li>A、B两个进程通过管道通信，A 进程每次接收到的数据通过共享内存传递给A1进程显示，同理，B进程每次接收到的数据通过共享内存传递给B1进程显示；</li>\n<li>对于A、B 进程，采用ctrl+c（实际为SIGINT信号）方式退出，A、B进程通过捕捉SIGINT信号注册信号处理函数进行资源清理，A1、B1进程手动关闭即可。<br><img src=\"/2019/04/18/ipc-chat/windows.png\" alt=\"聊天窗口模型\"></li>\n</ol>\n<h3 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h3><ol>\n<li>A、B通过管道通信，如果首先通过ctrl+c退出A进程，那么B进程的fifo1管道的写端会收到SIGPIPE信号而终止B进程，因此必须在B进程终止前清理掉被B占用的共享内存2，将共享内存2的引用计数减一，否则，当B1进程退出并清理共享内存2后，共享内存2的引用计数不为0，会导致共享内存2得不到释放；</li>\n<li>为了解决前一个问题，A、B进程在启动后立即将各自的进程id通过管道发送给对方，并在各自的进程退出时向对方进程id发送SIGINT信号，触发对方进程进入信号处理接口执行资源回收工作；</li>\n<li>A和A1通过共享内存1通信，会从A进程和A1进程的虚拟地址空间分配一段连续的页映射到同一块连续的物理内存页上，这样A、A1两个进程都可以间接访问物理内存页，从而达到通信的目的，一般共享内存需要进行保护，读写不能同时进行，也不能同时进行写操作，共享内存省去了从内核缓冲区到用户缓冲区的拷贝，因此效率高。</li>\n</ol>\n<h3 id=\"编码与效果图\"><a href=\"#编码与效果图\" class=\"headerlink\" title=\"编码与效果图\"></a>编码与效果图</h3><p><img src=\"/2019/04/18/ipc-chat/ret.png\" alt=\"运行结果\"></p>\n<p>func.h:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;fcntl.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/stat.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;errno.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;strings.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/select.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/time.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/wait.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/ipc.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/shm.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;netinet/in.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/socket.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;arpa/inet.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;netdb.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/select.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/time.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/uio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/stat.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;fcntl.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/ipc.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/shm.h&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>processA.cpp：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include \"func.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">int shmid;</span><br><span class=\"line\">int pidB;\t// 存放对端进程B的进程id号</span><br><span class=\"line\">char *p;\t// 共享内存指针</span><br><span class=\"line\"></span><br><span class=\"line\">// 回收共享内存资源前先杀死对端进程，否则回收失败</span><br><span class=\"line\">void handle(int num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">kill</span>(pidB, SIGINT);</span><br><span class=\"line\">\tshmdt(p);</span><br><span class=\"line\">\tint ret;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmctl\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> (void)-1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsignal(SIGINT, handle);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))  </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmget\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 管道文件为单工通信方式，因此需要建立两条管道</span><br><span class=\"line\">\t// A进程通过管道文件fifo1的读端fdr读取B进程发送的数据</span><br><span class=\"line\">\t// A进程通过管道文件fifo2的写端fdw向B进程发送数据</span><br><span class=\"line\">\tint fdr, fdw;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (fdr=open(<span class=\"string\">\"fifo1\"</span>, O_RDONLY)) || -1 == (fdw=open(<span class=\"string\">\"fifo2\"</span>, O_WRONLY)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"open fifo1 or open fifo2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 通信之前先通过管道互相告知对方自己的进程id</span><br><span class=\"line\">\tchar s1[10] = &#123;0&#125;;</span><br><span class=\"line\">\tchar s2[10] = &#123;0&#125;;</span><br><span class=\"line\">\tsprintf(s1, <span class=\"string\">\"%d\\n\"</span>, getpid());</span><br><span class=\"line\">\twrite(fdw, s1, strlen(s1) - 1);</span><br><span class=\"line\">\t<span class=\"built_in\">read</span>(fdr, s2, strlen(s1) - 1);</span><br><span class=\"line\">\tpidB = atoi(s2);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"pipe connect success, A to A1 shmid:[%d], pidA:[%d], pidB:[%d]\\n\"</span>, shmid, getpid(), pidB);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchar buf[1024] = &#123;0&#125;;</span><br><span class=\"line\">\tint ret;</span><br><span class=\"line\">\tfd_set rdset;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tFD_ZERO(&amp;rdset);</span><br><span class=\"line\">\t\tFD_SET(0, &amp;rdset);</span><br><span class=\"line\">\t\tFD_SET(fdr, &amp;rdset);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((ret=select(fdr+1, &amp;rdset, NULL, NULL, NULL) &gt; 0))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t// fdr可读,则接收数据之后通过共享内存传给A1</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(FD_ISSET(fdr, &amp;rdset))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">read</span>(fdr, buf, sizeof(buf)) &gt; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstrncpy(p, buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t// 标准输入可读,读出来传递给B进程</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(FD_ISSET(0, &amp;rdset))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">read</span>(STDIN_FILENO, buf, sizeof(buf)) &gt; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\twrite(fdw, buf, strlen(buf) - 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tclose(fdr);</span><br><span class=\"line\">\tclose(fdw);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>processB.cpp：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include \"func.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">int shmid;</span><br><span class=\"line\">int pidA;\t// 存放对端进程id</span><br><span class=\"line\">char *p;\t// 共享内存指针</span><br><span class=\"line\"></span><br><span class=\"line\">// 回收共享内存资源前先杀死对端进程，否则回收失败</span><br><span class=\"line\">void handle(int num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">kill</span>(pidA, SIGINT);</span><br><span class=\"line\">\tshmdt(p);</span><br><span class=\"line\">\tint ret;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmctl\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> (void)-1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsignal(SIGINT, handle);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmget\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 管道文件为单工通信方式</span><br><span class=\"line\">\t// B进程通过管道文件fifo1的写端fdw向A进程发送数据</span><br><span class=\"line\">\t// B进程通过管道文件fifo2的读端fdr接收A进程的数据</span><br><span class=\"line\">\tint fdr, fdw;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (fdw=open(<span class=\"string\">\"fifo1\"</span>, O_WRONLY)) || -1 == (fdr=open(<span class=\"string\">\"fifo2\"</span>, O_RDONLY)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"open fifo1 or open fifo2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 通信之前先通过管道互相告知对方自己的进程id</span><br><span class=\"line\">\tchar s1[10] = &#123;0&#125;;</span><br><span class=\"line\">\tchar s2[10] = &#123;0&#125;;</span><br><span class=\"line\">\tsprintf(s1, <span class=\"string\">\"%d\\n\"</span>, getpid());</span><br><span class=\"line\">\twrite(fdw, s1, strlen(s1) - 1);</span><br><span class=\"line\">\t<span class=\"built_in\">read</span>(fdr, s2, strlen(s1) - 1);</span><br><span class=\"line\">\tpidA = atoi(s2);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"pipe connect success, B to B1 shmid:[%d], pidA:[%d], pidB:[%d]\\n\"</span>, shmid, pidA, getpid());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchar buf[1024] = &#123;0&#125;;</span><br><span class=\"line\">\tint ret;</span><br><span class=\"line\">\tfd_set rdset;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tFD_ZERO(&amp;rdset);</span><br><span class=\"line\">\t\tFD_SET(0, &amp;rdset);</span><br><span class=\"line\">\t\tFD_SET(fdr, &amp;rdset);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((ret=select(fdr+1, &amp;rdset, NULL, NULL, NULL) &gt; 0))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t// fdr可读,则接收数据之后通过共享内存传给B1</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(FD_ISSET(fdr, &amp;rdset))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">read</span>(fdr, buf, sizeof(buf)) &gt; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstrncpy(p, buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t// 标注输入可读,读出来传递给A进程</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(FD_ISSET(0, &amp;rdset))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">read</span>(STDIN_FILENO, buf, sizeof(buf)) &gt; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\twrite(fdw, buf, strlen(buf) - 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tclose(fdr);</span><br><span class=\"line\">\tclose(fdw);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>processA1.cpp：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include \"fuprintf(\"p:%s\\n\", p);nc.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buf[1024] = &#123;0&#125;;</span><br><span class=\"line\">\tint shmid;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmget\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchar *p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!(strcmp(buf, p)))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t// 共享内存有数据可读</span><br><span class=\"line\">\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\tstrcpy(buf, p);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"I am A1, recv from A:[%s]\\n\"</span>, buf);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 ==(shmctl(shmid, IPC_RMID, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmctl\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>processB1.cpp：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include \"func.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buf[1024] = &#123;0&#125;;</span><br><span class=\"line\">\tint shmid;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmget\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchar *p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!(strcmp(buf, p)))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t// 共享内存有数据可读</span><br><span class=\"line\">\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\tstrcpy(buf, p);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"I am B1, recv from B:[%s]\\n\"</span>, buf);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 ==(shmctl(shmid, IPC_RMID, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmctl\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"回收资源\"><a href=\"#回收资源\" class=\"headerlink\" title=\"回收资源\"></a>回收资源</h3><ol>\n<li>这里首先通过ctrl+c退出A进程，然后B进程收到SIGPIPE信号退出，A、B进程同时调用各自的信号处理函数回收资源，通过ipcs命令发现拥有者为root的共享内存资源的nattch都为1，分别被A1和B1占有。</li>\n<li>然后手动关闭A1、B1进程，再次执行ipcs命令，发现拥有者为root的共享内存资源不存在，已经释放成功。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipcs  <span class=\"comment\"># 查看共性内存资源数量</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/2019/04/18/ipc-chat/ipcs.png\" alt=\"资源回收图\"></p>\n<h3 id=\"源码获取\"><a href=\"#源码获取\" class=\"headerlink\" title=\"源码获取\"></a>源码获取</h3><p>本文所有<a href=\"https://github.com/icoty/Linux/tree/master/IPC/chat\" target=\"_blank\" rel=\"noopener\">源码链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"问题模型\"><a href=\"#问题模型\" class=\"headerlink\" title=\"问题模型\"></a>问题模型</h3><ol>\n<li>A、B两个进程通过管道通信，A 进程每次接收到的数据通过共享内存传递给A1进程显示，同理，B进程每次接收到的数据通过共享内存传递给B1进程显示；</li>\n<li>对于A、B 进程，采用ctrl+c（实际为SIGINT信号）方式退出，A、B进程通过捕捉SIGINT信号注册信号处理函数进行资源清理，A1、B1进程手动关闭即可。<br><img src=\"/2019/04/18/ipc-chat/windows.png\" alt=\"聊天窗口模型\"></li>\n</ol>\n<h3 id=\"特别注意\"><a href=\"#特别注意\" class=\"headerlink\" title=\"特别注意\"></a>特别注意</h3><ol>\n<li>A、B通过管道通信，如果首先通过ctrl+c退出A进程，那么B进程的fifo1管道的写端会收到SIGPIPE信号而终止B进程，因此必须在B进程终止前清理掉被B占用的共享内存2，将共享内存2的引用计数减一，否则，当B1进程退出并清理共享内存2后，共享内存2的引用计数不为0，会导致共享内存2得不到释放；</li>\n<li>为了解决前一个问题，A、B进程在启动后立即将各自的进程id通过管道发送给对方，并在各自的进程退出时向对方进程id发送SIGINT信号，触发对方进程进入信号处理接口执行资源回收工作；</li>\n<li>A和A1通过共享内存1通信，会从A进程和A1进程的虚拟地址空间分配一段连续的页映射到同一块连续的物理内存页上，这样A、A1两个进程都可以间接访问物理内存页，从而达到通信的目的，一般共享内存需要进行保护，读写不能同时进行，也不能同时进行写操作，共享内存省去了从内核缓冲区到用户缓冲区的拷贝，因此效率高。</li>\n</ol>\n<h3 id=\"编码与效果图\"><a href=\"#编码与效果图\" class=\"headerlink\" title=\"编码与效果图\"></a>编码与效果图</h3><p><img src=\"/2019/04/18/ipc-chat/ret.png\" alt=\"运行结果\"></p>\n<p>func.h:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;fcntl.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/stat.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;errno.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;strings.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/select.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/time.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdlib.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/wait.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/ipc.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/shm.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;netinet/in.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/socket.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;arpa/inet.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;netdb.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/types.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/select.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/time.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/uio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/stat.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;fcntl.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;unistd.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/ipc.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;sys/shm.h&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>processA.cpp：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include \"func.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">int shmid;</span><br><span class=\"line\">int pidB;\t// 存放对端进程B的进程id号</span><br><span class=\"line\">char *p;\t// 共享内存指针</span><br><span class=\"line\"></span><br><span class=\"line\">// 回收共享内存资源前先杀死对端进程，否则回收失败</span><br><span class=\"line\">void handle(int num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">kill</span>(pidB, SIGINT);</span><br><span class=\"line\">\tshmdt(p);</span><br><span class=\"line\">\tint ret;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmctl\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> (void)-1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsignal(SIGINT, handle);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))  </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmget\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 管道文件为单工通信方式，因此需要建立两条管道</span><br><span class=\"line\">\t// A进程通过管道文件fifo1的读端fdr读取B进程发送的数据</span><br><span class=\"line\">\t// A进程通过管道文件fifo2的写端fdw向B进程发送数据</span><br><span class=\"line\">\tint fdr, fdw;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (fdr=open(<span class=\"string\">\"fifo1\"</span>, O_RDONLY)) || -1 == (fdw=open(<span class=\"string\">\"fifo2\"</span>, O_WRONLY)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"open fifo1 or open fifo2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 通信之前先通过管道互相告知对方自己的进程id</span><br><span class=\"line\">\tchar s1[10] = &#123;0&#125;;</span><br><span class=\"line\">\tchar s2[10] = &#123;0&#125;;</span><br><span class=\"line\">\tsprintf(s1, <span class=\"string\">\"%d\\n\"</span>, getpid());</span><br><span class=\"line\">\twrite(fdw, s1, strlen(s1) - 1);</span><br><span class=\"line\">\t<span class=\"built_in\">read</span>(fdr, s2, strlen(s1) - 1);</span><br><span class=\"line\">\tpidB = atoi(s2);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"pipe connect success, A to A1 shmid:[%d], pidA:[%d], pidB:[%d]\\n\"</span>, shmid, getpid(), pidB);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchar buf[1024] = &#123;0&#125;;</span><br><span class=\"line\">\tint ret;</span><br><span class=\"line\">\tfd_set rdset;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tFD_ZERO(&amp;rdset);</span><br><span class=\"line\">\t\tFD_SET(0, &amp;rdset);</span><br><span class=\"line\">\t\tFD_SET(fdr, &amp;rdset);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((ret=select(fdr+1, &amp;rdset, NULL, NULL, NULL) &gt; 0))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t// fdr可读,则接收数据之后通过共享内存传给A1</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(FD_ISSET(fdr, &amp;rdset))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">read</span>(fdr, buf, sizeof(buf)) &gt; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstrncpy(p, buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t// 标准输入可读,读出来传递给B进程</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(FD_ISSET(0, &amp;rdset))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">read</span>(STDIN_FILENO, buf, sizeof(buf)) &gt; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\twrite(fdw, buf, strlen(buf) - 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tclose(fdr);</span><br><span class=\"line\">\tclose(fdw);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>processB.cpp：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include \"func.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">int shmid;</span><br><span class=\"line\">int pidA;\t// 存放对端进程id</span><br><span class=\"line\">char *p;\t// 共享内存指针</span><br><span class=\"line\"></span><br><span class=\"line\">// 回收共享内存资源前先杀死对端进程，否则回收失败</span><br><span class=\"line\">void handle(int num)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">kill</span>(pidA, SIGINT);</span><br><span class=\"line\">\tshmdt(p);</span><br><span class=\"line\">\tint ret;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (ret=shmctl(shmid, IPC_RMID, NULL))) </span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmctl\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> (void)-1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(0);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tsignal(SIGINT, handle);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmget\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 管道文件为单工通信方式</span><br><span class=\"line\">\t// B进程通过管道文件fifo1的写端fdw向A进程发送数据</span><br><span class=\"line\">\t// B进程通过管道文件fifo2的读端fdr接收A进程的数据</span><br><span class=\"line\">\tint fdr, fdw;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (fdw=open(<span class=\"string\">\"fifo1\"</span>, O_WRONLY)) || -1 == (fdr=open(<span class=\"string\">\"fifo2\"</span>, O_RDONLY)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"open fifo1 or open fifo2\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t// 通信之前先通过管道互相告知对方自己的进程id</span><br><span class=\"line\">\tchar s1[10] = &#123;0&#125;;</span><br><span class=\"line\">\tchar s2[10] = &#123;0&#125;;</span><br><span class=\"line\">\tsprintf(s1, <span class=\"string\">\"%d\\n\"</span>, getpid());</span><br><span class=\"line\">\twrite(fdw, s1, strlen(s1) - 1);</span><br><span class=\"line\">\t<span class=\"built_in\">read</span>(fdr, s2, strlen(s1) - 1);</span><br><span class=\"line\">\tpidA = atoi(s2);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"pipe connect success, B to B1 shmid:[%d], pidA:[%d], pidB:[%d]\\n\"</span>, shmid, pidA, getpid());</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchar buf[1024] = &#123;0&#125;;</span><br><span class=\"line\">\tint ret;</span><br><span class=\"line\">\tfd_set rdset;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tFD_ZERO(&amp;rdset);</span><br><span class=\"line\">\t\tFD_SET(0, &amp;rdset);</span><br><span class=\"line\">\t\tFD_SET(fdr, &amp;rdset);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>((ret=select(fdr+1, &amp;rdset, NULL, NULL, NULL) &gt; 0))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t// fdr可读,则接收数据之后通过共享内存传给B1</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(FD_ISSET(fdr, &amp;rdset))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">read</span>(fdr, buf, sizeof(buf)) &gt; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\tstrncpy(p, buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t// 标注输入可读,读出来传递给A进程</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(FD_ISSET(0, &amp;rdset))</span><br><span class=\"line\">\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">read</span>(STDIN_FILENO, buf, sizeof(buf)) &gt; 0)</span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\twrite(fdw, buf, strlen(buf) - 1);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tclose(fdr);</span><br><span class=\"line\">\tclose(fdw);</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>processA1.cpp：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include \"fuprintf(\"p:%s\\n\", p);nc.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buf[1024] = &#123;0&#125;;</span><br><span class=\"line\">\tint shmid;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (shmid=shmget(1234, 4096, IPC_CREAT|0666)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmget\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchar *p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!(strcmp(buf, p)))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t// 共享内存有数据可读</span><br><span class=\"line\">\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\tstrcpy(buf, p);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"I am A1, recv from A:[%s]\\n\"</span>, buf);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 ==(shmctl(shmid, IPC_RMID, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmctl\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>processB1.cpp：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include \"func.h\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar buf[1024] = &#123;0&#125;;</span><br><span class=\"line\">\tint shmid;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 == (shmid=shmget(1235, 4096, IPC_CREAT|0666)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmget\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tchar *p;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>((char*)-1 == (p=(char*)shmat(shmid, NULL, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmat\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"literal\">true</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!(strcmp(buf, p)))</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t// 共享内存有数据可读</span><br><span class=\"line\">\t\t\tbzero(buf, sizeof(buf));</span><br><span class=\"line\">\t\t\tstrcpy(buf, p);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"I am B1, recv from B:[%s]\\n\"</span>, buf);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(-1 ==(shmctl(shmid, IPC_RMID, 0)))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">\"shmctl\"</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">return</span> -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"built_in\">return</span> 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"回收资源\"><a href=\"#回收资源\" class=\"headerlink\" title=\"回收资源\"></a>回收资源</h3><ol>\n<li>这里首先通过ctrl+c退出A进程，然后B进程收到SIGPIPE信号退出，A、B进程同时调用各自的信号处理函数回收资源，通过ipcs命令发现拥有者为root的共享内存资源的nattch都为1，分别被A1和B1占有。</li>\n<li>然后手动关闭A1、B1进程，再次执行ipcs命令，发现拥有者为root的共享内存资源不存在，已经释放成功。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ipcs  <span class=\"comment\"># 查看共性内存资源数量</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/2019/04/18/ipc-chat/ipcs.png\" alt=\"资源回收图\"></p>\n<h3 id=\"源码获取\"><a href=\"#源码获取\" class=\"headerlink\" title=\"源码获取\"></a>源码获取</h3><p>本文所有<a href=\"https://github.com/icoty/Linux/tree/master/IPC/chat\" target=\"_blank\" rel=\"noopener\">源码链接</a></p>\n"}],"PostAsset":[{"_id":"source/_posts/ipc-chat/ipcs.png","slug":"ipcs.png","post":"cjulzdfgu0002p3yo6i4i46l6","modified":0,"renderable":0},{"_id":"source/_posts/ipc-chat/ret.png","slug":"ret.png","post":"cjulzdfgu0002p3yo6i4i46l6","modified":0,"renderable":0},{"_id":"source/_posts/ipc-chat/windows.png","slug":"windows.png","post":"cjulzdfgu0002p3yo6i4i46l6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjulzdfgl0000p3yo93lt6gyw","category_id":"cjulzdfgz0004p3yo5asumkyv","_id":"cjulzdfh40008p3yo0mereypu"},{"post_id":"cjulzdfgu0002p3yo6i4i46l6","category_id":"cjulzdfh30006p3yof2sbxp3s","_id":"cjulzdfh4000ap3yoaisgbqlk"}],"PostTag":[{"post_id":"cjulzdfgl0000p3yo93lt6gyw","tag_id":"cjulzdfh10005p3yoltrejuza","_id":"cjulzdfha000dp3yoijr323nd"},{"post_id":"cjulzdfgl0000p3yo93lt6gyw","tag_id":"cjulzdfh30007p3yovqrelbs9","_id":"cjulzdfha000ep3yori169o1l"},{"post_id":"cjulzdfgl0000p3yo93lt6gyw","tag_id":"cjulzdfh40009p3yokx7rolbm","_id":"cjulzdfha000gp3yocln5g83b"},{"post_id":"cjulzdfgl0000p3yo93lt6gyw","tag_id":"cjulzdfh4000bp3yoizzc711c","_id":"cjulzdfhb000hp3yod2vlqo8p"},{"post_id":"cjulzdfgu0002p3yo6i4i46l6","tag_id":"cjulzdfh40009p3yokx7rolbm","_id":"cjulzdfhc000mp3yo51x7v6lu"},{"post_id":"cjulzdfgu0002p3yo6i4i46l6","tag_id":"cjulzdfha000fp3yo1oon91ei","_id":"cjulzdfhc000np3yodyupe7cr"},{"post_id":"cjulzdfgu0002p3yo6i4i46l6","tag_id":"cjulzdfhb000ip3yoq9hlb2kn","_id":"cjulzdfhc000op3yo1doz56hn"},{"post_id":"cjulzdfgu0002p3yo6i4i46l6","tag_id":"cjulzdfhb000jp3yoswo1rkbj","_id":"cjulzdfhc000pp3yoynoynryn"},{"post_id":"cjulzdfgu0002p3yo6i4i46l6","tag_id":"cjulzdfhb000kp3yoy9uglb3t","_id":"cjulzdfhc000qp3yolsbxgezy"},{"post_id":"cjulzdfgu0002p3yo6i4i46l6","tag_id":"cjulzdfhb000lp3yo4x96ii0z","_id":"cjulzdfhc000rp3yoo8dl3l96"}],"Tag":[{"name":"LAMP","_id":"cjulzdfh10005p3yoltrejuza"},{"name":"Docker","_id":"cjulzdfh30007p3yovqrelbs9"},{"name":"Linux","_id":"cjulzdfh40009p3yokx7rolbm"},{"name":"MVC","_id":"cjulzdfh4000bp3yoizzc711c"},{"name":"IPC","_id":"cjulzdfha000fp3yo1oon91ei"},{"name":"共享内存","_id":"cjulzdfhb000ip3yoq9hlb2kn"},{"name":"命名管道","_id":"cjulzdfhb000jp3yoswo1rkbj"},{"name":"信号","_id":"cjulzdfhb000kp3yoy9uglb3t"},{"name":"select","_id":"cjulzdfhb000lp3yo4x96ii0z"}]}}